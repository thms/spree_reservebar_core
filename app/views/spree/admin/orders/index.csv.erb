<% require 'csv' %>
<% if params[:type] == 'order' %>
<% if current_user.has_role?("admin") %>
OrderNumber,Order details link,Customer email address,Product name,OrderDate,OrderState,PaymentState,ShipmentState,Order Total,Total product(s) price,GiftPackagingCost(not paid to retailer),ShippingCost,Tax,Promo name,Promo discount ($),RB margin (Product price - product cost),RB margin after discount (RB margin - promo discount),Retailer,ProductCostForRetailer,TotalDisbursementToRetailer (product cost + sales tax)
<%= CSV.generate do |csv|
  @orders.each do |order|
    names_array = order.line_items.map{|line_item|line_item.product.try(:name)}.compact
    csv << [order.number, 
				url_for(:id => order.number, :action => 'show', :controller => 'admin/orders', :only_path => false, :protocol => 'https'),
				order.email,
				names_array.empty? ? nil : strip_tags(names_array.join('|')).gsub(/&quot;|,/, ''),
				(@show_only_completed ? order.completed_at : order.created_at).to_date,
				order.state,
				order.payment_state,
				order.shipment_state,
				order.total, 
				order.line_items.map(&:price).sum,
				order.gift_packaging_total,
				order.ship_total, 
				order.tax_total, 
				order.adjustments.eligible.promotion.first.try(:label),
				order.adjustments.eligible.promotion.first.try(:amount),
				(order.line_items.collect {|line_item| line_item.margin_for_site }).sum,
				(order.line_items.collect {|line_item| line_item.margin_for_site }).sum - (order.adjustments.eligible.promotion.first.nil? ? 0 : order.adjustments.eligible.promotion.first.amount.abs),
				order.retailer.name, 
				(order.line_items.collect {|line_item| line_item.product_cost_for_retailer }).sum,
				order.total_amount_due_to_retailer
			]
  end
end %>

<% else %>
OrderNumber,OrderDate,OrderState,PaymentState,ShipmentState,Tax,ProductCostForRetailer,TotalDisbursementToRetailer
<%= CSV.generate do |csv|
  @orders.each do |order|
    csv << [	order.number, 
				(@show_only_completed ? order.completed_at : order.created_at).to_date,
				order.state,
				order.payment_state,
				order.shipment_state,
				order.tax_total, 
				(order.line_items.collect {|line_item| line_item.product_cost_for_retailer }).sum,
				order.total_amount_due_to_retailer
			]
  end
end %>

<% end %>

<% else %>
<% if current_user.has_role?("admin") %>
OrderNumber,Order details link,Customer email address,Product name,Number of bottles,Multiple products in the order,OrderDate,OrderState,PaymentState,ShipmentState,Product price,GiftPackagingCost(not paid to retailer),RB margin (Product price - product cost),Promo,Total promo discount($),Retailer,ProductCostForRetailer
<%= CSV.generate do |csv|
  @orders.each do |order|
    line_items = order.line_items
    line_items.each do |line_item|
      csv << [order.number, 
				url_for(:id => order.number, :action => 'show', :controller => 'admin/orders', :only_path => false, :protocol => 'https'),
				order.email,
				line_item.product.nil? ? nil : strip_tags(line_item.product.name).gsub(/&quot;|,/, ''),
				line_item.quantity,
				(line_items.size > 1 ? "Yes" : "No"),
				(@show_only_completed ? order.completed_at : order.created_at).to_date,
				order.state,
				order.payment_state,
				order.shipment_state,
				line_item.price,
				line_item.adjustments.eligible.gift_packaging.map(&:amount).sum,
				line_item.margin_for_site,
				order.adjustments.eligible.promotion.first.try(:label),
				order.adjustments.eligible.promotion.first.try(:amount),
				order.retailer.try(:name),
				line_item.product_cost_for_retailer
			]
		end
  end
end %>

<% else %>
OrderNumber,ProductName,NumberOfBottles,MultipleProductsPerOrder,OrderState,PaymentState,ShipmentState,ProductCostForRetailer
<%= CSV.generate do |csv|
  @orders.each do |order|
    line_items = order.line_items
    line_items.each do |line_item|
      csv << [order.number,
        line_item.product.nil? ? nil : strip_tags(line_item.product.name).gsub(/&quot;|,/, ''),
        line_item.quantity,
        (line_items.size > 1 ? "Yes" : "No"),
        order.state,
				order.payment_state,
				order.shipment_state,
				line_item.product_cost_for_retailer
			]
		end
  end
end %>
<% end %>
<% end %>
